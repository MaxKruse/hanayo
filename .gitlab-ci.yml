variables:
  REGISTRY: d.nyodev.xyz
  SERVICE: hanayo
  IMAGE: ripple/$SERVICE
  PRODUCTION_BRANCH: production

default:
  before_script:
    - TAG=$(grep "const version" doc.go | cut -d'"' -f 2 | cut -c 2- | tr -d '\n')

stages:
  - test
  - build-docker
  - release
  - deploy

test:
  stage: test
  image: python:3.7
  services:
    - mariadb:10.3-bionic
    - redis:7-alpine
  variables:
    DB_HOST: mariadb
    DB_USERNAME: root
    DB_PASSWORD: root
    TEST_DB_NAME: test
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    USE_UVLOOP: "1"
    ENABLE_GEOLOC: "0"
    JWT_SECRET: thisisuselessdontpanic
  script:
    - git config submodule.common.url https://${GIT_USERNAME:-gitlab-ci-token}:${GIT_PASSWORD:-$CI_JOB_TOKEN}@zxq.co/ripple/dotto.git
    - git config submodule.tests/bdzr.url https://${GIT_USERNAME:-gitlab-ci-token}:${GIT_PASSWORD:-$CI_JOB_TOKEN}@zxq.co/ripple/bdzr.git
    - git submodule update --init --recursive

    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - >
      echo '{"database": {"host": "mariadb", "username": "root", "password": "root", "database": "test"}}' > config.json
    - python3 tests/bdzr/migrate.py
    - py.test
  rules:
    - if: $CI_COMMIT_BRANCH != $PRODUCTION_BRANCH

build-docker:
  stage: build-docker
  needs: ["test"]
  image: docker:20
  services:
    - docker:20-dind
  variables:
    DOCKERFILE: delta.Dockerfile.slim
  before_script:
    # prep steps
    - docker info
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY
    # fetches the latest image for this branch (not failing if image is not found)
    - BRANCH_FOR_DOCKER=$(echo $CI_COMMIT_BRANCH | sed s#/#__#g)
    - docker pull $REGISTRY/$IMAGE:$BRANCH_FOR_DOCKER || true

    # get Dockerfile
    - apk update
    - apk add git
    - git clone https://${GIT_USERNAME:-gitlab-ci-token}:${GIT_PASSWORD:-$CI_JOB_TOKEN}@zxq.co/ripple/dockerfiles.git /dockerfiles
    - cp /dockerfiles/dockerfiles/$DOCKERFILE $(pwd)/Dockerfile
  script:
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --build-arg GIT_COMMIT_SHA=$CI_COMMIT_SHA
      --cache-from $REGISTRY/$IMAGE:latest
      --tag $REGISTRY/$IMAGE:$CI_COMMIT_SHA
      .

    # Tag and push (tags: "git commit hash" and "branch name")
    - docker tag $REGISTRY/$IMAGE:$CI_COMMIT_SHA $REGISTRY/$IMAGE:$BRANCH_FOR_DOCKER
    - docker push $REGISTRY/$IMAGE:$CI_COMMIT_SHA
    - docker push $REGISTRY/$IMAGE:$BRANCH_FOR_DOCKER
  rules:
    - if: $CI_COMMIT_BRANCH != $PRODUCTION_BRANCH

release:
  stage: release
  needs: ["build-docker"]
  image: d.nyodev.xyz/ripple/gitlab-ci-tools
  script:
    - merge-into-production
  rules:
    - if: $CI_COMMIT_BRANCH != $PRODUCTION_BRANCH
  when: manual

deploy:
  stage: deploy
  image: d.nyodev.xyz/ripple/gitlab-ci-tools
  services:
    - docker:20-dind
  variables:
    DEPLOY_URL: https://deploy.ripple.moe
    DEPLOY_SECRET: $DEPLOY_SECRET
  script:
    - tag-image-with-version
    - deploy $SERVICE $TAG
  rules:
    - if: $CI_COMMIT_BRANCH == $PRODUCTION_BRANCH
